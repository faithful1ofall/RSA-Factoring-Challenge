#!/usr/bin/env bash

# Pollard's Rho Algorithm for integer factorization
pollards_rho() {
    local n=$1
    local x y c d

    x=$((RANDOM % (n - 1) + 1))
    y=$x
    c=$((RANDOM % (n - 1) + 1))
    d=1

    f() {
        echo $(( (x * x + c) % n ))
    }

    while [ $d -eq 1 ]; do
        x=$(f)
        y=$(f $(f $y))
        d=$(gcd $(( (x - y + n) % n )) $n)
    done

    echo $d
}

# Greatest Common Divisor
gcd() {
    local a=$1
    local b=$2

    while [ $b -ne 0 ]; do
        local temp=$b
        b=$((a % b))
        a=$temp
    done

    echo $a
}

# Factorize a number
factorize() {
    local num=$1
    local factors=()

    while [ $num -gt 1 ]; do
        factor=$(pollards_rho $num)
        factors+=("$factor")
        num=$((num / factor))
    done

    echo "${factors[@]}"
}

# Check and print factors
check_factor() {
    local num=$1
    local factors=($(factorize $num))
    local num1=${factors[0]}
    local num2=${factors[1]:-1}

    if [ $num2 -gt $num1 ]; then
        local temp=$num1
        num1=$num2
        num2=$temp
    fi

    echo "$num=$num1*$num2"
}

main() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 <file>"
        exit 1
    fi

    local input_file=$1

    while read -r num; do
        check_factor "$num"
    done < "$input_file"
}

main "$@"
